add_test([=[SymmetricTests.KeySizeInitialization]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/symmetric_tests [==[--gtest_filter=SymmetricTests.KeySizeInitialization]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricTests.KeySizeInitialization]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricTests.ECBBasicOperation]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/symmetric_tests [==[--gtest_filter=SymmetricTests.ECBBasicOperation]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricTests.ECBBasicOperation]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricTests.CBCBasicOperation]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/symmetric_tests [==[--gtest_filter=SymmetricTests.CBCBasicOperation]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricTests.CBCBasicOperation]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricTests.DifferentKeyLengths]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/symmetric_tests [==[--gtest_filter=SymmetricTests.DifferentKeyLengths]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricTests.DifferentKeyLengths]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricEdgeCaseTests.EmptyInput]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/symmetric_tests [==[--gtest_filter=SymmetricEdgeCaseTests.EmptyInput]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricEdgeCaseTests.EmptyInput]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricEdgeCaseTests.SingleBlockBoundary]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/symmetric_tests [==[--gtest_filter=SymmetricEdgeCaseTests.SingleBlockBoundary]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricEdgeCaseTests.SingleBlockBoundary]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricEdgeCaseTests.NullBytePatterns]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/symmetric_tests [==[--gtest_filter=SymmetricEdgeCaseTests.NullBytePatterns]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricEdgeCaseTests.NullBytePatterns]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricEdgeCaseTests.AllOnesPatterns]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/symmetric_tests [==[--gtest_filter=SymmetricEdgeCaseTests.AllOnesPatterns]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricEdgeCaseTests.AllOnesPatterns]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricEdgeCaseTests.AlternatingPatterns]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/symmetric_tests [==[--gtest_filter=SymmetricEdgeCaseTests.AlternatingPatterns]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricEdgeCaseTests.AlternatingPatterns]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricEdgeCaseTests.LargeInputSize]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/symmetric_tests [==[--gtest_filter=SymmetricEdgeCaseTests.LargeInputSize]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricEdgeCaseTests.LargeInputSize]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricEdgeCaseTests.InvalidKeySizes]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/symmetric_tests [==[--gtest_filter=SymmetricEdgeCaseTests.InvalidKeySizes]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricEdgeCaseTests.InvalidKeySizes]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricEdgeCaseTests.InvalidIVSizes]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/symmetric_tests [==[--gtest_filter=SymmetricEdgeCaseTests.InvalidIVSizes]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricEdgeCaseTests.InvalidIVSizes]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricEdgeCaseTests.PaddingEdgeCases]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/symmetric_tests [==[--gtest_filter=SymmetricEdgeCaseTests.PaddingEdgeCases]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricEdgeCaseTests.PaddingEdgeCases]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricEdgeCaseTests.KeySchedulingVariations]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/symmetric_tests [==[--gtest_filter=SymmetricEdgeCaseTests.KeySchedulingVariations]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricEdgeCaseTests.KeySchedulingVariations]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricEdgeCaseTests.CBCErrorPropagation]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/symmetric_tests [==[--gtest_filter=SymmetricEdgeCaseTests.CBCErrorPropagation]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricEdgeCaseTests.CBCErrorPropagation]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
set(  symmetric_tests_TESTS SymmetricTests.KeySizeInitialization SymmetricTests.ECBBasicOperation SymmetricTests.CBCBasicOperation SymmetricTests.DifferentKeyLengths SymmetricEdgeCaseTests.EmptyInput SymmetricEdgeCaseTests.SingleBlockBoundary SymmetricEdgeCaseTests.NullBytePatterns SymmetricEdgeCaseTests.AllOnesPatterns SymmetricEdgeCaseTests.AlternatingPatterns SymmetricEdgeCaseTests.LargeInputSize SymmetricEdgeCaseTests.InvalidKeySizes SymmetricEdgeCaseTests.InvalidIVSizes SymmetricEdgeCaseTests.PaddingEdgeCases SymmetricEdgeCaseTests.KeySchedulingVariations SymmetricEdgeCaseTests.CBCErrorPropagation)
