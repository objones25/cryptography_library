add_test([=[SymmetricTestBase.BasicEncryptionDecryption]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=SymmetricTestBase.BasicEncryptionDecryption]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricTestBase.BasicEncryptionDecryption]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricTestBase.SequentialDataPatterns]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=SymmetricTestBase.SequentialDataPatterns]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricTestBase.SequentialDataPatterns]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricTestBase.MultipleBlockSizes]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=SymmetricTestBase.MultipleBlockSizes]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricTestBase.MultipleBlockSizes]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricTestBase.PaddingVerification]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=SymmetricTestBase.PaddingVerification]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricTestBase.PaddingVerification]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricTestBase.PaddingAlignment]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=SymmetricTestBase.PaddingAlignment]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricTestBase.PaddingAlignment]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricPerformanceTests.LargeDataPerformance]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=SymmetricPerformanceTests.LargeDataPerformance]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricPerformanceTests.LargeDataPerformance]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricPerformanceTests.ParallelProcessing]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=SymmetricPerformanceTests.ParallelProcessing]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricPerformanceTests.ParallelProcessing]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricPerformanceTests.ProcessingTimeConsistency]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=SymmetricPerformanceTests.ProcessingTimeConsistency]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricPerformanceTests.ProcessingTimeConsistency]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricEdgeCaseTests.PaddingEdgeCases]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=SymmetricEdgeCaseTests.PaddingEdgeCases]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricEdgeCaseTests.PaddingEdgeCases]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricEdgeCaseTests.ErrorPropagation]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=SymmetricEdgeCaseTests.ErrorPropagation]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricEdgeCaseTests.ErrorPropagation]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricEdgeCaseTests.MemoryBoundary]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=SymmetricEdgeCaseTests.MemoryBoundary]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricEdgeCaseTests.MemoryBoundary]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricSafetyTests.MemoryLeakCheck]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=SymmetricSafetyTests.MemoryLeakCheck]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricSafetyTests.MemoryLeakCheck]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricSafetyTests.ThreadSafetyConcurrent]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=SymmetricSafetyTests.ThreadSafetyConcurrent]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricSafetyTests.ThreadSafetyConcurrent]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[SymmetricSafetyTests.SecureErasure]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=SymmetricSafetyTests.SecureErasure]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[SymmetricSafetyTests.SecureErasure]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[PKCS7PaddingTest.SingleBlockWithPadding]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=PKCS7PaddingTest.SingleBlockWithPadding]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[PKCS7PaddingTest.SingleBlockWithPadding]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[PKCS7PaddingTest.FullBlockPadding]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=PKCS7PaddingTest.FullBlockPadding]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[PKCS7PaddingTest.FullBlockPadding]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[PKCS7PaddingTest.MultipleBlocksWithPadding]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=PKCS7PaddingTest.MultipleBlocksWithPadding]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[PKCS7PaddingTest.MultipleBlocksWithPadding]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[PKCS7PaddingTest.CorruptPadding]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=PKCS7PaddingTest.CorruptPadding]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[PKCS7PaddingTest.CorruptPadding]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[HashTests.NISTTestVectors]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=HashTests.NISTTestVectors]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[HashTests.NISTTestVectors]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[HashTests.EdgeCases]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=HashTests.EdgeCases]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[HashTests.EdgeCases]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[HashTests.InputValidation]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=HashTests.InputValidation]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[HashTests.InputValidation]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[HashTests.StringInterface]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=HashTests.StringInterface]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[HashTests.StringInterface]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[HashTests.HMACBasic]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=HashTests.HMACBasic]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[HashTests.HMACBasic]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[HashTests.HMACEdgeCases]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=HashTests.HMACEdgeCases]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[HashTests.HMACEdgeCases]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[HashTests.LargeDataPerformance]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=HashTests.LargeDataPerformance]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[HashTests.LargeDataPerformance]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[HashTests.ConsistentResults]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=HashTests.ConsistentResults]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[HashTests.ConsistentResults]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[HashTests.MillionA]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=HashTests.MillionA]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[HashTests.MillionA]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[AESNITest.RoundKeyGeneration]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=AESNITest.RoundKeyGeneration]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[AESNITest.RoundKeyGeneration]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[AESNITest.SingleBlockEncryption]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=AESNITest.SingleBlockEncryption]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[AESNITest.SingleBlockEncryption]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[AESNITest.EncryptDecryptRoundTrip]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=AESNITest.EncryptDecryptRoundTrip]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[AESNITest.EncryptDecryptRoundTrip]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test([=[AESNITest.CheckAvailability]=]  /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests/crypto_tests [==[--gtest_filter=AESNITest.CheckAvailability]==] --gtest_also_run_disabled_tests)
set_tests_properties([=[AESNITest.CheckAvailability]=]  PROPERTIES WORKING_DIRECTORY /Users/theelusivegerbilfish/CPP_projects/cryptography_library/build/tests SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
set(  crypto_tests_TESTS SymmetricTestBase.BasicEncryptionDecryption SymmetricTestBase.SequentialDataPatterns SymmetricTestBase.MultipleBlockSizes SymmetricTestBase.PaddingVerification SymmetricTestBase.PaddingAlignment SymmetricPerformanceTests.LargeDataPerformance SymmetricPerformanceTests.ParallelProcessing SymmetricPerformanceTests.ProcessingTimeConsistency SymmetricEdgeCaseTests.PaddingEdgeCases SymmetricEdgeCaseTests.ErrorPropagation SymmetricEdgeCaseTests.MemoryBoundary SymmetricSafetyTests.MemoryLeakCheck SymmetricSafetyTests.ThreadSafetyConcurrent SymmetricSafetyTests.SecureErasure PKCS7PaddingTest.SingleBlockWithPadding PKCS7PaddingTest.FullBlockPadding PKCS7PaddingTest.MultipleBlocksWithPadding PKCS7PaddingTest.CorruptPadding HashTests.NISTTestVectors HashTests.EdgeCases HashTests.InputValidation HashTests.StringInterface HashTests.HMACBasic HashTests.HMACEdgeCases HashTests.LargeDataPerformance HashTests.ConsistentResults HashTests.MillionA AESNITest.RoundKeyGeneration AESNITest.SingleBlockEncryption AESNITest.EncryptDecryptRoundTrip AESNITest.CheckAvailability)
